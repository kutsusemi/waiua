/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AuthRiotgamesComUserinfoGet200Response {
    #[serde(rename = "country")]
    pub country: String,
    /// Player UUID
    #[serde(rename = "sub")]
    pub sub: String,
    #[serde(rename = "email_verified")]
    pub email_verified: bool,
    #[serde(rename = "player_plocale", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub player_plocale: Option<Option<serde_json::Value>>,
    /// Milliseconds since epoch
    #[serde(rename = "country_at", deserialize_with = "Option::deserialize")]
    pub country_at: Option<f64>,
    #[serde(rename = "pw")]
    pub pw: Box<models::AuthRiotgamesComUserinfoGet200ResponsePw>,
    #[serde(rename = "phone_number_verified")]
    pub phone_number_verified: bool,
    #[serde(rename = "account_verified")]
    pub account_verified: bool,
    #[serde(rename = "ppid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ppid: Option<Option<serde_json::Value>>,
    #[serde(rename = "federated_identity_providers")]
    pub federated_identity_providers: Vec<String>,
    #[serde(rename = "player_locale", deserialize_with = "Option::deserialize")]
    pub player_locale: Option<String>,
    #[serde(rename = "acct")]
    pub acct: Box<models::AuthRiotgamesComUserinfoGet200ResponseAcct>,
    #[serde(rename = "age")]
    pub age: f64,
    #[serde(rename = "jti")]
    pub jti: String,
    #[serde(rename = "affinity")]
    pub affinity: std::collections::HashMap<String, String>,
}

impl AuthRiotgamesComUserinfoGet200Response {
    pub fn new(country: String, sub: String, email_verified: bool, country_at: Option<f64>, pw: models::AuthRiotgamesComUserinfoGet200ResponsePw, phone_number_verified: bool, account_verified: bool, federated_identity_providers: Vec<String>, player_locale: Option<String>, acct: models::AuthRiotgamesComUserinfoGet200ResponseAcct, age: f64, jti: String, affinity: std::collections::HashMap<String, String>) -> AuthRiotgamesComUserinfoGet200Response {
        AuthRiotgamesComUserinfoGet200Response {
            country,
            sub,
            email_verified,
            player_plocale: None,
            country_at,
            pw: Box::new(pw),
            phone_number_verified,
            account_verified,
            ppid: None,
            federated_identity_providers,
            player_locale,
            acct: Box::new(acct),
            age,
            jti,
            affinity,
        }
    }
}

