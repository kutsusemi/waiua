/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContractsV1ContractsPuuidGet200Response {
    #[serde(rename = "Version")]
    pub version: f64,
    /// Player UUID
    #[serde(rename = "Subject")]
    pub subject: String,
    #[serde(rename = "Contracts")]
    pub contracts: Vec<models::ContractsV1ContractsPuuidGet200ResponseContractsInner>,
    #[serde(rename = "ProcessedMatches")]
    pub processed_matches: Vec<models::ContractsV1ContractsPuuidGet200ResponseProcessedMatchesInner>,
    /// UUID
    #[serde(rename = "ActiveSpecialContract")]
    pub active_special_contract: String,
    #[serde(rename = "Missions")]
    pub missions: Vec<models::ContractsV1ContractsPuuidGet200ResponseMissionsInner>,
    #[serde(rename = "MissionMetadata")]
    pub mission_metadata: Box<models::ContractsV1ContractsPuuidGet200ResponseMissionMetadata>,
}

impl ContractsV1ContractsPuuidGet200Response {
    pub fn new(version: f64, subject: String, contracts: Vec<models::ContractsV1ContractsPuuidGet200ResponseContractsInner>, processed_matches: Vec<models::ContractsV1ContractsPuuidGet200ResponseProcessedMatchesInner>, active_special_contract: String, missions: Vec<models::ContractsV1ContractsPuuidGet200ResponseMissionsInner>, mission_metadata: models::ContractsV1ContractsPuuidGet200ResponseMissionMetadata) -> ContractsV1ContractsPuuidGet200Response {
        ContractsV1ContractsPuuidGet200Response {
            version,
            subject,
            contracts,
            processed_matches,
            active_special_contract,
            missions,
            mission_metadata: Box::new(mission_metadata),
        }
    }
}

