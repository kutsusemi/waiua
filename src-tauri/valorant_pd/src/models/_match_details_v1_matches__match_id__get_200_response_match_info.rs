/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MatchDetailsV1MatchesMatchIdGet200ResponseMatchInfo {
    /// Match ID
    #[serde(rename = "matchId")]
    pub match_id: String,
    /// Map ID
    #[serde(rename = "mapId")]
    pub map_id: String,
    #[serde(rename = "gamePodId")]
    pub game_pod_id: String,
    #[serde(rename = "gameLoopZone")]
    pub game_loop_zone: String,
    #[serde(rename = "gameServerAddress")]
    pub game_server_address: String,
    #[serde(rename = "gameVersion")]
    pub game_version: String,
    #[serde(rename = "gameLengthMillis", deserialize_with = "Option::deserialize")]
    pub game_length_millis: Option<f64>,
    #[serde(rename = "gameStartMillis")]
    pub game_start_millis: f64,
    #[serde(rename = "provisioningFlowID")]
    pub provisioning_flow_id: ProvisioningFlowId,
    #[serde(rename = "isCompleted")]
    pub is_completed: bool,
    #[serde(rename = "customGameName")]
    pub custom_game_name: String,
    #[serde(rename = "forcePostProcessing")]
    pub force_post_processing: bool,
    /// Queue ID
    #[serde(rename = "queueID")]
    pub queue_id: String,
    /// Game Mode
    #[serde(rename = "gameMode")]
    pub game_mode: String,
    #[serde(rename = "isRanked")]
    pub is_ranked: bool,
    #[serde(rename = "isMatchSampled")]
    pub is_match_sampled: bool,
    /// Season ID
    #[serde(rename = "seasonId")]
    pub season_id: String,
    #[serde(rename = "completionState")]
    pub completion_state: CompletionState,
    #[serde(rename = "platformType")]
    pub platform_type: PlatformType,
    #[serde(rename = "premierMatchInfo")]
    pub premier_match_info: serde_json::Value,
    #[serde(rename = "partyRRPenalties", skip_serializing_if = "Option::is_none")]
    pub party_rr_penalties: Option<std::collections::HashMap<String, f64>>,
    #[serde(rename = "shouldMatchDisablePenalties")]
    pub should_match_disable_penalties: bool,
}

impl MatchDetailsV1MatchesMatchIdGet200ResponseMatchInfo {
    pub fn new(match_id: String, map_id: String, game_pod_id: String, game_loop_zone: String, game_server_address: String, game_version: String, game_length_millis: Option<f64>, game_start_millis: f64, provisioning_flow_id: ProvisioningFlowId, is_completed: bool, custom_game_name: String, force_post_processing: bool, queue_id: String, game_mode: String, is_ranked: bool, is_match_sampled: bool, season_id: String, completion_state: CompletionState, platform_type: PlatformType, premier_match_info: serde_json::Value, should_match_disable_penalties: bool) -> MatchDetailsV1MatchesMatchIdGet200ResponseMatchInfo {
        MatchDetailsV1MatchesMatchIdGet200ResponseMatchInfo {
            match_id,
            map_id,
            game_pod_id,
            game_loop_zone,
            game_server_address,
            game_version,
            game_length_millis,
            game_start_millis,
            provisioning_flow_id,
            is_completed,
            custom_game_name,
            force_post_processing,
            queue_id,
            game_mode,
            is_ranked,
            is_match_sampled,
            season_id,
            completion_state,
            platform_type,
            premier_match_info,
            party_rr_penalties: None,
            should_match_disable_penalties,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProvisioningFlowId {
    #[serde(rename = "Matchmaking")]
    Matchmaking,
    #[serde(rename = "CustomGame")]
    CustomGame,
}

impl Default for ProvisioningFlowId {
    fn default() -> ProvisioningFlowId {
        Self::Matchmaking
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CompletionState {
    #[serde(rename = "Surrendered")]
    Surrendered,
    #[serde(rename = "Completed")]
    Completed,
    #[serde(rename = "VoteDraw")]
    VoteDraw,
    #[serde(rename = "")]
    Empty,
}

impl Default for CompletionState {
    fn default() -> CompletionState {
        Self::Surrendered
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PlatformType {
    #[serde(rename = "PC")]
    Pc,
}

impl Default for PlatformType {
    fn default() -> PlatformType {
        Self::Pc
    }
}

