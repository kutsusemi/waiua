/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContractDefinitionsV3ItemUpgradesGet200ResponseDefinitionsInnerSidegradesInnerOptionsInner {
    /// UUID
    #[serde(rename = "OptionID")]
    pub option_id: String,
    #[serde(rename = "Cost")]
    pub cost: Box<models::ContractDefinitionsV3ItemUpgradesGet200ResponseDefinitionsInnerSidegradesInnerOptionsInnerCost>,
    #[serde(rename = "Rewards")]
    pub rewards: Vec<models::ContractDefinitionsV3ItemUpgradesGet200ResponseDefinitionsInnerRewardScheduleRewardsPerLevelInnerEntitlementRewardsInner>,
}

impl ContractDefinitionsV3ItemUpgradesGet200ResponseDefinitionsInnerSidegradesInnerOptionsInner {
    pub fn new(option_id: String, cost: models::ContractDefinitionsV3ItemUpgradesGet200ResponseDefinitionsInnerSidegradesInnerOptionsInnerCost, rewards: Vec<models::ContractDefinitionsV3ItemUpgradesGet200ResponseDefinitionsInnerRewardScheduleRewardsPerLevelInnerEntitlementRewardsInner>) -> ContractDefinitionsV3ItemUpgradesGet200ResponseDefinitionsInnerSidegradesInnerOptionsInner {
        ContractDefinitionsV3ItemUpgradesGet200ResponseDefinitionsInnerSidegradesInnerOptionsInner {
            option_id,
            cost: Box::new(cost),
            rewards,
        }
    }
}

