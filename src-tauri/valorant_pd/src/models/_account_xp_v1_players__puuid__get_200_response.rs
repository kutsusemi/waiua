/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountXpV1PlayersPuuidGet200Response {
    #[serde(rename = "Version")]
    pub version: f64,
    /// Player UUID
    #[serde(rename = "Subject")]
    pub subject: String,
    #[serde(rename = "Progress")]
    pub progress: Box<models::AccountXpV1PlayersPuuidGet200ResponseProgress>,
    #[serde(rename = "History")]
    pub history: Vec<models::AccountXpV1PlayersPuuidGet200ResponseHistoryInner>,
    /// Date in ISO 8601 format
    #[serde(rename = "LastTimeGrantedFirstWin")]
    pub last_time_granted_first_win: String,
    /// Date in ISO 8601 format
    #[serde(rename = "NextTimeFirstWinAvailable")]
    pub next_time_first_win_available: String,
}

impl AccountXpV1PlayersPuuidGet200Response {
    pub fn new(
        version: f64,
        subject: String,
        progress: models::AccountXpV1PlayersPuuidGet200ResponseProgress,
        history: Vec<models::AccountXpV1PlayersPuuidGet200ResponseHistoryInner>,
        last_time_granted_first_win: String,
        next_time_first_win_available: String,
    ) -> AccountXpV1PlayersPuuidGet200Response {
        AccountXpV1PlayersPuuidGet200Response {
            version,
            subject,
            progress: Box::new(progress),
            history,
            last_time_granted_first_win,
            next_time_first_win_available,
        }
    }
}
