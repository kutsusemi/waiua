/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlayerStatsInner {
    /// Player UUID
    #[serde(rename = "subject")]
    pub subject: String,
    #[serde(rename = "kills")]
    pub kills: Vec<models::MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlayerStatsInnerKillsInner>,
    #[serde(rename = "damage")]
    pub damage: Vec<models::MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlayerStatsInnerDamageInner>,
    #[serde(rename = "score")]
    pub score: f64,
    #[serde(rename = "economy")]
    pub economy: Box<models::MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlayerStatsInnerEconomy>,
    #[serde(rename = "ability")]
    pub ability: Box<models::MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlayerStatsInnerAbility>,
    #[serde(rename = "wasAfk")]
    pub was_afk: bool,
    #[serde(rename = "wasPenalized")]
    pub was_penalized: bool,
    #[serde(rename = "stayedInSpawn")]
    pub stayed_in_spawn: bool,
}

impl MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlayerStatsInner {
    pub fn new(subject: String, kills: Vec<models::MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlayerStatsInnerKillsInner>, damage: Vec<models::MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlayerStatsInnerDamageInner>, score: f64, economy: models::MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlayerStatsInnerEconomy, ability: models::MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlayerStatsInnerAbility, was_afk: bool, was_penalized: bool, stayed_in_spawn: bool) -> MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlayerStatsInner {
        MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlayerStatsInner {
            subject,
            kills,
            damage,
            score,
            economy: Box::new(economy),
            ability: Box::new(ability),
            was_afk,
            was_penalized,
            stayed_in_spawn,
        }
    }
}

