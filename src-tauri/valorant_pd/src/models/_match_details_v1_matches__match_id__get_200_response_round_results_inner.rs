/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInner {
    #[serde(rename = "roundNum")]
    pub round_num: f64,
    #[serde(rename = "roundResult")]
    pub round_result: RoundResult,
    #[serde(rename = "roundCeremony")]
    pub round_ceremony: RoundCeremony,
    #[serde(rename = "winningTeam")]
    pub winning_team: Box<models::MatchDetailsV1MatchesMatchIdGet200ResponsePlayersInnerTeamId>,
    /// Player UUID
    #[serde(rename = "bombPlanter", skip_serializing_if = "Option::is_none")]
    pub bomb_planter: Option<String>,
    #[serde(rename = "bombDefuser", skip_serializing_if = "Option::is_none")]
    pub bomb_defuser: Option<Box<models::MatchDetailsV1MatchesMatchIdGet200ResponsePlayersInnerTeamId>>,
    /// Time in milliseconds since the start of the round when the bomb was planted. 0 if not planted
    #[serde(rename = "plantRoundTime", skip_serializing_if = "Option::is_none")]
    pub plant_round_time: Option<f64>,
    #[serde(rename = "plantPlayerLocations", deserialize_with = "Option::deserialize")]
    pub plant_player_locations: Option<Vec<models::MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlantPlayerLocationsInner>>,
    #[serde(rename = "plantLocation")]
    pub plant_location: Box<models::MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlantPlayerLocationsInnerLocation>,
    #[serde(rename = "plantSite")]
    pub plant_site: PlantSite,
    /// Time in milliseconds since the start of the round when the bomb was defused. 0 if not defused
    #[serde(rename = "defuseRoundTime", skip_serializing_if = "Option::is_none")]
    pub defuse_round_time: Option<f64>,
    #[serde(rename = "defusePlayerLocations", deserialize_with = "Option::deserialize")]
    pub defuse_player_locations: Option<Vec<models::MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlantPlayerLocationsInner>>,
    #[serde(rename = "defuseLocation")]
    pub defuse_location: Box<models::MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlantPlayerLocationsInnerLocation>,
    #[serde(rename = "playerStats")]
    pub player_stats: Vec<models::MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlayerStatsInner>,
    /// Empty string if the timer expired
    #[serde(rename = "roundResultCode")]
    pub round_result_code: RoundResultCode,
    #[serde(rename = "playerEconomies", deserialize_with = "Option::deserialize")]
    pub player_economies: Option<Vec<models::MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlayerEconomiesInner>>,
    #[serde(rename = "playerScores", deserialize_with = "Option::deserialize")]
    pub player_scores: Option<Vec<models::MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlayerScoresInner>>,
}

impl MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInner {
    pub fn new(round_num: f64, round_result: RoundResult, round_ceremony: RoundCeremony, winning_team: models::MatchDetailsV1MatchesMatchIdGet200ResponsePlayersInnerTeamId, plant_player_locations: Option<Vec<models::MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlantPlayerLocationsInner>>, plant_location: models::MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlantPlayerLocationsInnerLocation, plant_site: PlantSite, defuse_player_locations: Option<Vec<models::MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlantPlayerLocationsInner>>, defuse_location: models::MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlantPlayerLocationsInnerLocation, player_stats: Vec<models::MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlayerStatsInner>, round_result_code: RoundResultCode, player_economies: Option<Vec<models::MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlayerEconomiesInner>>, player_scores: Option<Vec<models::MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInnerPlayerScoresInner>>) -> MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInner {
        MatchDetailsV1MatchesMatchIdGet200ResponseRoundResultsInner {
            round_num,
            round_result,
            round_ceremony,
            winning_team: Box::new(winning_team),
            bomb_planter: None,
            bomb_defuser: None,
            plant_round_time: None,
            plant_player_locations,
            plant_location: Box::new(plant_location),
            plant_site,
            defuse_round_time: None,
            defuse_player_locations,
            defuse_location: Box::new(defuse_location),
            player_stats,
            round_result_code,
            player_economies,
            player_scores,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RoundResult {
    #[serde(rename = "Eliminated")]
    Eliminated,
    #[serde(rename = "Bomb detonated")]
    BombDetonated,
    #[serde(rename = "Bomb defused")]
    BombDefused,
    #[serde(rename = "Surrendered")]
    Surrendered,
    #[serde(rename = "Round timer expired")]
    RoundTimerExpired,
}

impl Default for RoundResult {
    fn default() -> RoundResult {
        Self::Eliminated
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RoundCeremony {
    #[serde(rename = "CeremonyDefault")]
    CeremonyDefault,
    #[serde(rename = "CeremonyTeamAce")]
    CeremonyTeamAce,
    #[serde(rename = "CeremonyFlawless")]
    CeremonyFlawless,
    #[serde(rename = "CeremonyCloser")]
    CeremonyCloser,
    #[serde(rename = "CeremonyClutch")]
    CeremonyClutch,
    #[serde(rename = "CeremonyThrifty")]
    CeremonyThrifty,
    #[serde(rename = "CeremonyAce")]
    CeremonyAce,
    #[serde(rename = "")]
    Empty,
}

impl Default for RoundCeremony {
    fn default() -> RoundCeremony {
        Self::CeremonyDefault
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PlantSite {
    #[serde(rename = "A")]
    A,
    #[serde(rename = "B")]
    B,
    #[serde(rename = "C")]
    C,
    #[serde(rename = "")]
    Empty,
}

impl Default for PlantSite {
    fn default() -> PlantSite {
        Self::A
    }
}
/// Empty string if the timer expired
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RoundResultCode {
    #[serde(rename = "Elimination")]
    Elimination,
    #[serde(rename = "Detonate")]
    Detonate,
    #[serde(rename = "Defuse")]
    Defuse,
    #[serde(rename = "Surrendered")]
    Surrendered,
    #[serde(rename = "")]
    Empty,
}

impl Default for RoundResultCode {
    fn default() -> RoundResultCode {
        Self::Elimination
    }
}

