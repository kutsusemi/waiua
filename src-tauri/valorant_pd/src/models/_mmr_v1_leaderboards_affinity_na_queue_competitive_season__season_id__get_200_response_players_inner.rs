/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MmrV1LeaderboardsAffinityNaQueueCompetitiveSeasonSeasonIdGet200ResponsePlayersInner {
    /// Card ID
    #[serde(rename = "PlayerCardID")]
    pub player_card_id: String,
    /// Title ID
    #[serde(rename = "TitleID")]
    pub title_id: String,
    #[serde(rename = "IsBanned")]
    pub is_banned: bool,
    #[serde(rename = "IsAnonymized")]
    pub is_anonymized: bool,
    /// Player UUID
    #[serde(rename = "puuid")]
    pub puuid: String,
    #[serde(rename = "gameName")]
    pub game_name: String,
    #[serde(rename = "tagLine")]
    pub tag_line: String,
    #[serde(rename = "leaderboardRank")]
    pub leaderboard_rank: f64,
    #[serde(rename = "rankedRating")]
    pub ranked_rating: f64,
    #[serde(rename = "numberOfWins")]
    pub number_of_wins: f64,
    #[serde(rename = "competitiveTier")]
    pub competitive_tier: f64,
}

impl MmrV1LeaderboardsAffinityNaQueueCompetitiveSeasonSeasonIdGet200ResponsePlayersInner {
    pub fn new(player_card_id: String, title_id: String, is_banned: bool, is_anonymized: bool, puuid: String, game_name: String, tag_line: String, leaderboard_rank: f64, ranked_rating: f64, number_of_wins: f64, competitive_tier: f64) -> MmrV1LeaderboardsAffinityNaQueueCompetitiveSeasonSeasonIdGet200ResponsePlayersInner {
        MmrV1LeaderboardsAffinityNaQueueCompetitiveSeasonSeasonIdGet200ResponsePlayersInner {
            player_card_id,
            title_id,
            is_banned,
            is_anonymized,
            puuid,
            game_name,
            tag_line,
            leaderboard_rank,
            ranked_rating,
            number_of_wins,
            competitive_tier,
        }
    }
}

