/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PersonalizationV2PlayersPuuidPlayerloadoutGet200Response {
    /// Player UUID
    #[serde(rename = "Subject")]
    pub subject: String,
    #[serde(rename = "Version")]
    pub version: f64,
    #[serde(rename = "Guns")]
    pub guns: Vec<models::PersonalizationV2PlayersPuuidPlayerloadoutGet200ResponseGunsInner>,
    #[serde(rename = "Sprays")]
    pub sprays: Vec<models::PersonalizationV2PlayersPuuidPlayerloadoutGet200ResponseSpraysInner>,
    #[serde(rename = "Identity")]
    pub identity: Box<models::PersonalizationV2PlayersPuuidPlayerloadoutGet200ResponseIdentity>,
    #[serde(rename = "Incognito")]
    pub incognito: bool,
}

impl PersonalizationV2PlayersPuuidPlayerloadoutGet200Response {
    pub fn new(subject: String, version: f64, guns: Vec<models::PersonalizationV2PlayersPuuidPlayerloadoutGet200ResponseGunsInner>, sprays: Vec<models::PersonalizationV2PlayersPuuidPlayerloadoutGet200ResponseSpraysInner>, identity: models::PersonalizationV2PlayersPuuidPlayerloadoutGet200ResponseIdentity, incognito: bool) -> PersonalizationV2PlayersPuuidPlayerloadoutGet200Response {
        PersonalizationV2PlayersPuuidPlayerloadoutGet200Response {
            subject,
            version,
            guns,
            sprays,
            identity: Box::new(identity),
            incognito,
        }
    }
}

