/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`account_xp_v1_players_puuid_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountXpV1PlayersPuuidGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`contract_definitions_v3_item_upgrades_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractDefinitionsV3ItemUpgradesGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`contracts_v1_contracts_puuid_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractsV1ContractsPuuidGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`contracts_v1_contracts_puuid_special_contract_id_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractsV1ContractsPuuidSpecialContractIdPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`match_details_v1_matches_match_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MatchDetailsV1MatchesMatchIdGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`match_history_v1_history_puuid_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MatchHistoryV1HistoryPuuidGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mmr_v1_leaderboards_affinity_na_queue_competitive_season_season_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MmrV1LeaderboardsAffinityNaQueueCompetitiveSeasonSeasonIdGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mmr_v1_players_puuid_competitiveupdates_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MmrV1PlayersPuuidCompetitiveupdatesGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mmr_v1_players_puuid_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MmrV1PlayersPuuidGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`name_service_v2_players_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NameServiceV2PlayersPutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`personalization_v2_players_puuid_playerloadout_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PersonalizationV2PlayersPuuidPlayerloadoutGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`personalization_v2_players_puuid_playerloadout_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PersonalizationV2PlayersPuuidPlayerloadoutPutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`restrictions_v3_penalties_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RestrictionsV3PenaltiesGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`store_v1_entitlements_puuid_item_type_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StoreV1EntitlementsPuuidItemTypeIdGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`store_v1_offers_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StoreV1OffersGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`store_v1_wallet_puuid_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StoreV1WalletPuuidGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`store_v2_storefront_puuid_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StoreV2StorefrontPuuidGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`v1_config_region_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1ConfigRegionGetError {
    UnknownValue(serde_json::Value),
}


/// Get the account level, XP, and XP history for the current player. This endpoint only works with the authenticated player's PUUID.
pub async fn account_xp_v1_players_puuid_get(configuration: &configuration::Configuration, puuid: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::AccountXpV1PlayersPuuidGet200Response, Error<AccountXpV1PlayersPuuidGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/account_xp/v1/players/{puuid}", local_var_configuration.base_path, puuid=crate::apis::urlencode(puuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AccountXpV1PlayersPuuidGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get details for item upgrades
pub async fn contract_definitions_v3_item_upgrades_get(configuration: &configuration::Configuration, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::ContractDefinitionsV3ItemUpgradesGet200Response, Error<ContractDefinitionsV3ItemUpgradesGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contract_definitions/v3/item_upgrades", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContractDefinitionsV3ItemUpgradesGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get contract details including agents, battlepass, missions, and recent games
pub async fn contracts_v1_contracts_puuid_get(configuration: &configuration::Configuration, puuid: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::ContractsV1ContractsPuuidGet200Response, Error<ContractsV1ContractsPuuidGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contracts/v1/contracts/{puuid}", local_var_configuration.base_path, puuid=crate::apis::urlencode(puuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContractsV1ContractsPuuidGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Activate a specific contract by ID
pub async fn contracts_v1_contracts_puuid_special_contract_id_post(configuration: &configuration::Configuration, contract_id: &str, puuid: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::ContractsV1ContractsPuuidGet200Response, Error<ContractsV1ContractsPuuidSpecialContractIdPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/contracts/v1/contracts/{puuid}/special/{contract_id}", local_var_configuration.base_path, contract_id=crate::apis::urlencode(contract_id), puuid=crate::apis::urlencode(puuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ContractsV1ContractsPuuidSpecialContractIdPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the details of a match after it ends
pub async fn match_details_v1_matches_match_id_get(configuration: &configuration::Configuration, match_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::MatchDetailsV1MatchesMatchIdGet200Response, Error<MatchDetailsV1MatchesMatchIdGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/match_details/v1/matches/{matchID}", local_var_configuration.base_path, matchID=crate::apis::urlencode(match_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<MatchDetailsV1MatchesMatchIdGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the match history for the given player
pub async fn match_history_v1_history_puuid_get(configuration: &configuration::Configuration, puuid: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::MatchHistoryV1HistoryPuuidGet200Response, Error<MatchHistoryV1HistoryPuuidGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/match_history/v1/history/{puuid}", local_var_configuration.base_path, puuid=crate::apis::urlencode(puuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<MatchHistoryV1HistoryPuuidGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the leaderboard for a given season
pub async fn mmr_v1_leaderboards_affinity_na_queue_competitive_season_season_id_get(configuration: &configuration::Configuration, season_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::MmrV1LeaderboardsAffinityNaQueueCompetitiveSeasonSeasonIdGet200Response, Error<MmrV1LeaderboardsAffinityNaQueueCompetitiveSeasonSeasonIdGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/mmr/v1/leaderboards/affinity/na/queue/competitive/season/{season_id}", local_var_configuration.base_path, season_id=crate::apis::urlencode(season_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<MmrV1LeaderboardsAffinityNaQueueCompetitiveSeasonSeasonIdGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get recent games and how they changed ranking
pub async fn mmr_v1_players_puuid_competitiveupdates_get(configuration: &configuration::Configuration, puuid: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::MmrV1PlayersPuuidCompetitiveupdatesGet200Response, Error<MmrV1PlayersPuuidCompetitiveupdatesGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/mmr/v1/players/{puuid}/competitiveupdates", local_var_configuration.base_path, puuid=crate::apis::urlencode(puuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<MmrV1PlayersPuuidCompetitiveupdatesGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get a player's MMR and history
pub async fn mmr_v1_players_puuid_get(configuration: &configuration::Configuration, puuid: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::MmrV1PlayersPuuidGet200Response, Error<MmrV1PlayersPuuidGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/mmr/v1/players/{puuid}", local_var_configuration.base_path, puuid=crate::apis::urlencode(puuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<MmrV1PlayersPuuidGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get a player's name and tagline by their PUUID. Supports retrieving multiple players in one request.
pub async fn name_service_v2_players_put(configuration: &configuration::Configuration, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<Vec<models::NameServiceV2PlayersPut200ResponseInner>, Error<NameServiceV2PlayersPutError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/name_service/v2/players", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<NameServiceV2PlayersPutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the player's current loadout. Only works for your own PUUID.
pub async fn personalization_v2_players_puuid_playerloadout_get(configuration: &configuration::Configuration, puuid: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PersonalizationV2PlayersPuuidPlayerloadoutGet200Response, Error<PersonalizationV2PlayersPuuidPlayerloadoutGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/personalization/v2/players/{puuid}/playerloadout", local_var_configuration.base_path, puuid=crate::apis::urlencode(puuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PersonalizationV2PlayersPuuidPlayerloadoutGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Set the player's current loadout.
pub async fn personalization_v2_players_puuid_playerloadout_put(configuration: &configuration::Configuration, puuid: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PersonalizationV2PlayersPuuidPlayerloadoutGet200Response, Error<PersonalizationV2PlayersPuuidPlayerloadoutPutError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/personalization/v2/players/{puuid}/playerloadout", local_var_configuration.base_path, puuid=crate::apis::urlencode(puuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PersonalizationV2PlayersPuuidPlayerloadoutPutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the matchmaking penalties for the given player
pub async fn restrictions_v3_penalties_get(configuration: &configuration::Configuration, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::RestrictionsV3PenaltiesGet200Response, Error<RestrictionsV3PenaltiesGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/restrictions/v3/penalties", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RestrictionsV3PenaltiesGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List what the player owns (agents, skins, buddies, ect.) Category names and IDs:    `ItemTypeID` | Name --- | --- `01bb38e1-da47-4e6a-9b3d-945fe4655707` | Agents `f85cb6f7-33e5-4dc8-b609-ec7212301948` | Contracts `d5f120f8-ff8c-4aac-92ea-f2b5acbe9475` | Sprays `dd3bf334-87f3-40bd-b043-682a57a8dc3a` | Gun Buddies `3f296c07-64c3-494c-923b-fe692a4fa1bd` | Cards `e7c63390-eda7-46e0-bb7a-a6abdacd2433` | Skins `3ad1b2b2-acdb-4524-852f-954a76ddae0a` | Skin Variants `de7caa6b-adf7-4588-bbd1-143831e786c6` | Titles  
pub async fn store_v1_entitlements_puuid_item_type_id_get(configuration: &configuration::Configuration, item_type_id: &str, puuid: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::StoreV1EntitlementsPuuidItemTypeIdGet200Response, Error<StoreV1EntitlementsPuuidItemTypeIdGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/store/v1/entitlements/{puuid}/{ItemTypeID}", local_var_configuration.base_path, ItemTypeID=crate::apis::urlencode(item_type_id), puuid=crate::apis::urlencode(puuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<StoreV1EntitlementsPuuidItemTypeIdGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the current store prices for all items
pub async fn store_v1_offers_get(configuration: &configuration::Configuration, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::StoreV1OffersGet200Response, Error<StoreV1OffersGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/store/v1/offers/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<StoreV1OffersGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the current wallet balance for the user
pub async fn store_v1_wallet_puuid_get(configuration: &configuration::Configuration, puuid: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::StoreV1WalletPuuidGet200Response, Error<StoreV1WalletPuuidGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/store/v1/wallet/{puuid}", local_var_configuration.base_path, puuid=crate::apis::urlencode(puuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<StoreV1WalletPuuidGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the currently available items in the store
pub async fn store_v2_storefront_puuid_get(configuration: &configuration::Configuration, puuid: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::StoreV2StorefrontPuuidGet200Response, Error<StoreV2StorefrontPuuidGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/store/v2/storefront/{puuid}", local_var_configuration.base_path, puuid=crate::apis::urlencode(puuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<StoreV2StorefrontPuuidGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the config for the given player
pub async fn v1_config_region_get(configuration: &configuration::Configuration, region: &str) -> Result<models::V1ConfigRegionGet200Response, Error<V1ConfigRegionGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/config/{region}", local_var_configuration.base_path, region=crate::apis::urlencode(region));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<V1ConfigRegionGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

