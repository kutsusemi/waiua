/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`core_game_v1_matches_current_game_match_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CoreGameV1MatchesCurrentGameMatchIdGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`core_game_v1_matches_current_game_match_id_loadouts_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CoreGameV1MatchesCurrentGameMatchIdLoadoutsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`core_game_v1_players_puuid_disassociate_current_game_match_id_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CoreGameV1PlayersPuuidDisassociateCurrentGameMatchIdPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`core_game_v1_players_puuid_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CoreGameV1PlayersPuuidGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`parties_v1_parties_customgameconfigs_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PartiesV1PartiesCustomgameconfigsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`parties_v1_parties_party_id_accessibility_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PartiesV1PartiesPartyIdAccessibilityPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`parties_v1_parties_party_id_customgamesettings_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PartiesV1PartiesPartyIdCustomgamesettingsPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`parties_v1_parties_party_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PartiesV1PartiesPartyIdGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`parties_v1_parties_party_id_invitecode_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PartiesV1PartiesPartyIdInvitecodeDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`parties_v1_parties_party_id_invitecode_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PartiesV1PartiesPartyIdInvitecodePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`parties_v1_parties_party_id_invites_name_name_tag_tagline_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PartiesV1PartiesPartyIdInvitesNameNameTagTaglinePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`parties_v1_parties_party_id_matchmaking_join_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PartiesV1PartiesPartyIdMatchmakingJoinPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`parties_v1_parties_party_id_matchmaking_leave_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PartiesV1PartiesPartyIdMatchmakingLeavePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`parties_v1_parties_party_id_members_puuid_refresh_competitive_tier_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PartiesV1PartiesPartyIdMembersPuuidRefreshCompetitiveTierPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`parties_v1_parties_party_id_members_puuid_refresh_pings_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PartiesV1PartiesPartyIdMembersPuuidRefreshPingsPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`parties_v1_parties_party_id_members_puuid_refresh_player_identity_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PartiesV1PartiesPartyIdMembersPuuidRefreshPlayerIdentityPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`parties_v1_parties_party_id_members_puuid_set_ready_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PartiesV1PartiesPartyIdMembersPuuidSetReadyPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`parties_v1_parties_party_id_muctoken_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PartiesV1PartiesPartyIdMuctokenGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`parties_v1_parties_party_id_queue_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PartiesV1PartiesPartyIdQueuePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`parties_v1_parties_party_id_request_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PartiesV1PartiesPartyIdRequestPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`parties_v1_parties_party_id_request_request_id_decline_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PartiesV1PartiesPartyIdRequestRequestIdDeclinePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`parties_v1_parties_party_id_startcustomgame_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PartiesV1PartiesPartyIdStartcustomgamePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`parties_v1_parties_party_id_voicetoken_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PartiesV1PartiesPartyIdVoicetokenGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`parties_v1_players_joinbycode_code_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PartiesV1PlayersJoinbycodeCodePostError {
    Status404(models::PartiesV1PlayersJoinbycodeCodePost404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`parties_v1_players_puuid_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PartiesV1PlayersPuuidDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`parties_v1_players_puuid_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PartiesV1PlayersPuuidGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`pregame_v1_matches_pre_game_match_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PregameV1MatchesPreGameMatchIdGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`pregame_v1_matches_pre_game_match_id_loadouts_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PregameV1MatchesPreGameMatchIdLoadoutsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`pregame_v1_matches_pre_game_match_id_lock_agent_id_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PregameV1MatchesPreGameMatchIdLockAgentIdPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`pregame_v1_matches_pre_game_match_id_quit_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PregameV1MatchesPreGameMatchIdQuitPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`pregame_v1_matches_pre_game_match_id_select_agent_id_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PregameV1MatchesPreGameMatchIdSelectAgentIdPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`pregame_v1_players_puuid_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PregameV1PlayersPuuidGetError {
    UnknownValue(serde_json::Value),
}


/// Get the current game match info
pub async fn core_game_v1_matches_current_game_match_id_get(configuration: &configuration::Configuration, current_game_match_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::CoreGameV1MatchesCurrentGameMatchIdGet200Response, Error<CoreGameV1MatchesCurrentGameMatchIdGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/core_game/v1/matches/{current_game_match_id}", local_var_configuration.base_path, current_game_match_id=crate::apis::urlencode(current_game_match_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CoreGameV1MatchesCurrentGameMatchIdGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the current game loadout info for all players in the match
pub async fn core_game_v1_matches_current_game_match_id_loadouts_get(configuration: &configuration::Configuration, current_game_match_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::CoreGameV1MatchesCurrentGameMatchIdLoadoutsGet200Response, Error<CoreGameV1MatchesCurrentGameMatchIdLoadoutsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/core_game/v1/matches/{current_game_match_id}/loadouts", local_var_configuration.base_path, current_game_match_id=crate::apis::urlencode(current_game_match_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CoreGameV1MatchesCurrentGameMatchIdLoadoutsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Quits the current game
pub async fn core_game_v1_players_puuid_disassociate_current_game_match_id_post(configuration: &configuration::Configuration, puuid: &str, current_game_match_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<serde_json::Value, Error<CoreGameV1PlayersPuuidDisassociateCurrentGameMatchIdPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/core_game/v1/players/{puuid}/disassociate/{current_game_match_id}", local_var_configuration.base_path, puuid=crate::apis::urlencode(puuid), current_game_match_id=crate::apis::urlencode(current_game_match_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CoreGameV1PlayersPuuidDisassociateCurrentGameMatchIdPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the current game match ID for the provided player
pub async fn core_game_v1_players_puuid_get(configuration: &configuration::Configuration, puuid: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PregameV1PlayersPuuidGet200Response, Error<CoreGameV1PlayersPuuidGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/core_game/v1/players/{puuid}", local_var_configuration.base_path, puuid=crate::apis::urlencode(puuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CoreGameV1PlayersPuuidGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get information about the available gamemodes, maps, queues, and gamepods
pub async fn parties_v1_parties_customgameconfigs_get(configuration: &configuration::Configuration, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PartiesV1PartiesCustomgameconfigsGet200Response, Error<PartiesV1PartiesCustomgameconfigsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/parties/v1/parties/customgameconfigs", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PartiesV1PartiesCustomgameconfigsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Set the accessibility of the party
pub async fn parties_v1_parties_party_id_accessibility_post(configuration: &configuration::Configuration, party_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PartiesV1PartiesPartyIdGet200Response, Error<PartiesV1PartiesPartyIdAccessibilityPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/parties/v1/parties/{party_id}/accessibility", local_var_configuration.base_path, party_id=crate::apis::urlencode(party_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PartiesV1PartiesPartyIdAccessibilityPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Changes the settings for a custom game
pub async fn parties_v1_parties_party_id_customgamesettings_post(configuration: &configuration::Configuration, party_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PartiesV1PartiesPartyIdGet200Response, Error<PartiesV1PartiesPartyIdCustomgamesettingsPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/parties/v1/parties/{party_id}/customgamesettings", local_var_configuration.base_path, party_id=crate::apis::urlencode(party_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PartiesV1PartiesPartyIdCustomgamesettingsPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the party information for the given party ID
pub async fn parties_v1_parties_party_id_get(configuration: &configuration::Configuration, party_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PartiesV1PartiesPartyIdGet200Response, Error<PartiesV1PartiesPartyIdGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/parties/v1/parties/{party_id}", local_var_configuration.base_path, party_id=crate::apis::urlencode(party_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PartiesV1PartiesPartyIdGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Disable the party invite code
pub async fn parties_v1_parties_party_id_invitecode_delete(configuration: &configuration::Configuration, party_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PartiesV1PartiesPartyIdGet200Response, Error<PartiesV1PartiesPartyIdInvitecodeDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/parties/v1/parties/{party_id}/invitecode", local_var_configuration.base_path, party_id=crate::apis::urlencode(party_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PartiesV1PartiesPartyIdInvitecodeDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Generate a party invite code
pub async fn parties_v1_parties_party_id_invitecode_post(configuration: &configuration::Configuration, party_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PartiesV1PartiesPartyIdGet200Response, Error<PartiesV1PartiesPartyIdInvitecodePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/parties/v1/parties/{party_id}/invitecode", local_var_configuration.base_path, party_id=crate::apis::urlencode(party_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PartiesV1PartiesPartyIdInvitecodePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Invite a player to the party by name and tagline
pub async fn parties_v1_parties_party_id_invites_name_name_tag_tagline_post(configuration: &configuration::Configuration, name: &str, tagline: &str, party_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PartiesV1PartiesPartyIdGet200Response, Error<PartiesV1PartiesPartyIdInvitesNameNameTagTaglinePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/parties/v1/parties/{party_id}/invites/name/{name}/tag/{tagline}", local_var_configuration.base_path, name=crate::apis::urlencode(name), tagline=crate::apis::urlencode(tagline), party_id=crate::apis::urlencode(party_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PartiesV1PartiesPartyIdInvitesNameNameTagTaglinePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Enter the matchmaking queue for the party
pub async fn parties_v1_parties_party_id_matchmaking_join_post(configuration: &configuration::Configuration, party_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PartiesV1PartiesPartyIdGet200Response, Error<PartiesV1PartiesPartyIdMatchmakingJoinPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/parties/v1/parties/{party_id}/matchmaking/join", local_var_configuration.base_path, party_id=crate::apis::urlencode(party_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PartiesV1PartiesPartyIdMatchmakingJoinPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Leave the matchmaking queue for the party
pub async fn parties_v1_parties_party_id_matchmaking_leave_post(configuration: &configuration::Configuration, party_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PartiesV1PartiesPartyIdGet200Response, Error<PartiesV1PartiesPartyIdMatchmakingLeavePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/parties/v1/parties/{party_id}/matchmaking/leave", local_var_configuration.base_path, party_id=crate::apis::urlencode(party_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PartiesV1PartiesPartyIdMatchmakingLeavePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Refresh the competitive tier of the specified player
pub async fn parties_v1_parties_party_id_members_puuid_refresh_competitive_tier_post(configuration: &configuration::Configuration, party_id: &str, puuid: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PartiesV1PartiesPartyIdGet200Response, Error<PartiesV1PartiesPartyIdMembersPuuidRefreshCompetitiveTierPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/parties/v1/parties/{party_id}/members/{puuid}/refreshCompetitiveTier", local_var_configuration.base_path, party_id=crate::apis::urlencode(party_id), puuid=crate::apis::urlencode(puuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PartiesV1PartiesPartyIdMembersPuuidRefreshCompetitiveTierPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Refresh the pings of the specified player
pub async fn parties_v1_parties_party_id_members_puuid_refresh_pings_post(configuration: &configuration::Configuration, party_id: &str, puuid: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PartiesV1PartiesPartyIdGet200Response, Error<PartiesV1PartiesPartyIdMembersPuuidRefreshPingsPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/parties/v1/parties/{party_id}/members/{puuid}/refreshPings", local_var_configuration.base_path, party_id=crate::apis::urlencode(party_id), puuid=crate::apis::urlencode(puuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PartiesV1PartiesPartyIdMembersPuuidRefreshPingsPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Refresh the identity of the specified player
pub async fn parties_v1_parties_party_id_members_puuid_refresh_player_identity_post(configuration: &configuration::Configuration, party_id: &str, puuid: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PartiesV1PartiesPartyIdGet200Response, Error<PartiesV1PartiesPartyIdMembersPuuidRefreshPlayerIdentityPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/parties/v1/parties/{party_id}/members/{puuid}/refreshPlayerIdentity", local_var_configuration.base_path, party_id=crate::apis::urlencode(party_id), puuid=crate::apis::urlencode(puuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PartiesV1PartiesPartyIdMembersPuuidRefreshPlayerIdentityPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Set the ready status of a player in the current party
pub async fn parties_v1_parties_party_id_members_puuid_set_ready_post(configuration: &configuration::Configuration, party_id: &str, puuid: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PartiesV1PartiesPartyIdGet200Response, Error<PartiesV1PartiesPartyIdMembersPuuidSetReadyPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/parties/v1/parties/{party_id}/members/{puuid}/setReady", local_var_configuration.base_path, party_id=crate::apis::urlencode(party_id), puuid=crate::apis::urlencode(puuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PartiesV1PartiesPartyIdMembersPuuidSetReadyPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the party chat token
pub async fn parties_v1_parties_party_id_muctoken_get(configuration: &configuration::Configuration, party_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PartiesV1PartiesPartyIdMuctokenGet200Response, Error<PartiesV1PartiesPartyIdMuctokenGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}//parties/v1/parties/{party_id}/muctoken", local_var_configuration.base_path, party_id=crate::apis::urlencode(party_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PartiesV1PartiesPartyIdMuctokenGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Change the queue for the party
pub async fn parties_v1_parties_party_id_queue_post(configuration: &configuration::Configuration, party_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PartiesV1PartiesPartyIdGet200Response, Error<PartiesV1PartiesPartyIdQueuePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/parties/v1/parties/{party_id}/queue", local_var_configuration.base_path, party_id=crate::apis::urlencode(party_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PartiesV1PartiesPartyIdQueuePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Requests to join the specified party ID
pub async fn parties_v1_parties_party_id_request_post(configuration: &configuration::Configuration, party_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<serde_json::Value, Error<PartiesV1PartiesPartyIdRequestPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/parties/v1/parties/{party_id}/request", local_var_configuration.base_path, party_id=crate::apis::urlencode(party_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PartiesV1PartiesPartyIdRequestPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Decline a party invite request
pub async fn parties_v1_parties_party_id_request_request_id_decline_post(configuration: &configuration::Configuration, request_id: &str, party_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PartiesV1PartiesPartyIdGet200Response, Error<PartiesV1PartiesPartyIdRequestRequestIdDeclinePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/parties/v1/parties/{party_id}/request/{request_id}/decline", local_var_configuration.base_path, request_id=crate::apis::urlencode(request_id), party_id=crate::apis::urlencode(party_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PartiesV1PartiesPartyIdRequestRequestIdDeclinePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Start a custom game
pub async fn parties_v1_parties_party_id_startcustomgame_post(configuration: &configuration::Configuration, party_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PartiesV1PartiesPartyIdGet200Response, Error<PartiesV1PartiesPartyIdStartcustomgamePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/parties/v1/parties/{party_id}/startcustomgame", local_var_configuration.base_path, party_id=crate::apis::urlencode(party_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PartiesV1PartiesPartyIdStartcustomgamePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the party voice token
pub async fn parties_v1_parties_party_id_voicetoken_get(configuration: &configuration::Configuration, party_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PartiesV1PartiesPartyIdMuctokenGet200Response, Error<PartiesV1PartiesPartyIdVoicetokenGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}//parties/v1/parties/{party_id}/voicetoken", local_var_configuration.base_path, party_id=crate::apis::urlencode(party_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PartiesV1PartiesPartyIdVoicetokenGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Join a party using an invite code
pub async fn parties_v1_players_joinbycode_code_post(configuration: &configuration::Configuration, code: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PartiesV1PlayersPuuidGet200Response, Error<PartiesV1PlayersJoinbycodeCodePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/parties/v1/players/joinbycode/{code}", local_var_configuration.base_path, code=crate::apis::urlencode(code));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PartiesV1PlayersJoinbycodeCodePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Remove a player from the current party
pub async fn parties_v1_players_puuid_delete(configuration: &configuration::Configuration, puuid: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<serde_json::Value, Error<PartiesV1PlayersPuuidDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/parties/v1/players/{puuid}", local_var_configuration.base_path, puuid=crate::apis::urlencode(puuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PartiesV1PlayersPuuidDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the party information for the given player
pub async fn parties_v1_players_puuid_get(configuration: &configuration::Configuration, puuid: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PartiesV1PlayersPuuidGet200Response, Error<PartiesV1PlayersPuuidGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/parties/v1/players/{puuid}", local_var_configuration.base_path, puuid=crate::apis::urlencode(puuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PartiesV1PlayersPuuidGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get Pre-Game match data
pub async fn pregame_v1_matches_pre_game_match_id_get(configuration: &configuration::Configuration, pre_game_match_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PregameV1MatchesPreGameMatchIdGet200Response, Error<PregameV1MatchesPreGameMatchIdGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/pregame/v1/matches/{pre_game_match_id}", local_var_configuration.base_path, pre_game_match_id=crate::apis::urlencode(pre_game_match_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PregameV1MatchesPreGameMatchIdGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get Pre-Game loadout data
pub async fn pregame_v1_matches_pre_game_match_id_loadouts_get(configuration: &configuration::Configuration, pre_game_match_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PregameV1MatchesPreGameMatchIdLoadoutsGet200Response, Error<PregameV1MatchesPreGameMatchIdLoadoutsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/pregame/v1/matches/{pre_game_match_id}/loadouts", local_var_configuration.base_path, pre_game_match_id=crate::apis::urlencode(pre_game_match_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PregameV1MatchesPreGameMatchIdLoadoutsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lock in an agent   **DO NOT USE THIS FOR INSTALOCKING**   Riot doesn't like this. You may get banned or get the API restricted for the rest of us.  
pub async fn pregame_v1_matches_pre_game_match_id_lock_agent_id_post(configuration: &configuration::Configuration, agent_id: &str, pre_game_match_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PregameV1MatchesPreGameMatchIdGet200Response, Error<PregameV1MatchesPreGameMatchIdLockAgentIdPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/pregame/v1/matches/{pre_game_match_id}/lock/{agent_id}", local_var_configuration.base_path, agent_id=crate::apis::urlencode(agent_id), pre_game_match_id=crate::apis::urlencode(pre_game_match_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PregameV1MatchesPreGameMatchIdLockAgentIdPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Quit the pre-game lobby
pub async fn pregame_v1_matches_pre_game_match_id_quit_post(configuration: &configuration::Configuration, pre_game_match_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<serde_json::Value, Error<PregameV1MatchesPreGameMatchIdQuitPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/pregame/v1/matches/{pre_game_match_id}/quit", local_var_configuration.base_path, pre_game_match_id=crate::apis::urlencode(pre_game_match_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PregameV1MatchesPreGameMatchIdQuitPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Select an agent   **DO NOT USE THIS FOR INSTALOCKING**   Riot doesn't like this. You may get banned or get the API restricted for the rest of us.  
pub async fn pregame_v1_matches_pre_game_match_id_select_agent_id_post(configuration: &configuration::Configuration, agent_id: &str, pre_game_match_id: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PregameV1MatchesPreGameMatchIdGet200Response, Error<PregameV1MatchesPreGameMatchIdSelectAgentIdPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/pregame/v1/matches/{pre_game_match_id}/select/{agent_id}", local_var_configuration.base_path, agent_id=crate::apis::urlencode(agent_id), pre_game_match_id=crate::apis::urlencode(pre_game_match_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PregameV1MatchesPreGameMatchIdSelectAgentIdPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the pre-game match ID for the provided player
pub async fn pregame_v1_players_puuid_get(configuration: &configuration::Configuration, puuid: &str, x_riot_entitlements_jwt: &str, x_riot_client_version: &str, x_riot_client_platform: &str) -> Result<models::PregameV1PlayersPuuidGet200Response, Error<PregameV1PlayersPuuidGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/pregame/v1/players/{puuid}", local_var_configuration.base_path, puuid=crate::apis::urlencode(puuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Riot-Entitlements-JWT", x_riot_entitlements_jwt.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientVersion", x_riot_client_version.to_string());
    local_var_req_builder = local_var_req_builder.header("X-Riot-ClientPlatform", x_riot_client_platform.to_string());
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PregameV1PlayersPuuidGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

