/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PregameV1MatchesPreGameMatchIdGet200ResponseTeamsInnerPlayersInnerSeasonalBadgeInfo {
    #[serde(rename = "SeasonID")]
    pub season_id: Box<models::PregameV1MatchesPreGameMatchIdGet200ResponseTeamsInnerPlayersInnerSeasonalBadgeInfoSeasonId>,
    #[serde(rename = "NumberOfWins")]
    pub number_of_wins: f64,
    #[serde(rename = "WinsByTier", deserialize_with = "Option::deserialize")]
    pub wins_by_tier: Option<serde_json::Value>,
    #[serde(rename = "Rank")]
    pub rank: f64,
    #[serde(rename = "LeaderboardRank")]
    pub leaderboard_rank: f64,
}

impl PregameV1MatchesPreGameMatchIdGet200ResponseTeamsInnerPlayersInnerSeasonalBadgeInfo {
    pub fn new(season_id: models::PregameV1MatchesPreGameMatchIdGet200ResponseTeamsInnerPlayersInnerSeasonalBadgeInfoSeasonId, number_of_wins: f64, wins_by_tier: Option<serde_json::Value>, rank: f64, leaderboard_rank: f64) -> PregameV1MatchesPreGameMatchIdGet200ResponseTeamsInnerPlayersInnerSeasonalBadgeInfo {
        PregameV1MatchesPreGameMatchIdGet200ResponseTeamsInnerPlayersInnerSeasonalBadgeInfo {
            season_id: Box::new(season_id),
            number_of_wins,
            wins_by_tier,
            rank,
            leaderboard_rank,
        }
    }
}

