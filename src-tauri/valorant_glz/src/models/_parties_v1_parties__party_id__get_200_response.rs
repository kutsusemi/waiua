/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PartiesV1PartiesPartyIdGet200Response {
    /// Party ID
    #[serde(rename = "ID")]
    pub id: String,
    #[serde(rename = "MUCName")]
    pub muc_name: String,
    #[serde(rename = "VoiceRoomID")]
    pub voice_room_id: String,
    #[serde(rename = "Version")]
    pub version: f64,
    #[serde(rename = "ClientVersion")]
    pub client_version: String,
    #[serde(rename = "Members")]
    pub members: Vec<models::PartiesV1PartiesPartyIdGet200ResponseMembersInner>,
    #[serde(rename = "State")]
    pub state: String,
    #[serde(rename = "PreviousState")]
    pub previous_state: String,
    #[serde(rename = "StateTransitionReason")]
    pub state_transition_reason: String,
    #[serde(rename = "Accessibility")]
    pub accessibility: Box<models::PartiesV1PartiesPartyIdGet200ResponseAccessibility>,
    #[serde(rename = "CustomGameData")]
    pub custom_game_data: Box<models::PartiesV1PartiesPartyIdGet200ResponseCustomGameData>,
    #[serde(rename = "MatchmakingData")]
    pub matchmaking_data: Box<models::PartiesV1PartiesPartyIdGet200ResponseMatchmakingData>,
    #[serde(rename = "Invites", deserialize_with = "Option::deserialize")]
    pub invites: Option<serde_json::Value>,
    #[serde(rename = "Requests")]
    pub requests: Vec<serde_json::Value>,
    /// Date in ISO 8601 format
    #[serde(rename = "QueueEntryTime")]
    pub queue_entry_time: String,
    #[serde(rename = "ErrorNotification")]
    pub error_notification: Box<models::PartiesV1PartiesPartyIdGet200ResponseErrorNotification>,
    #[serde(rename = "RestrictedSeconds")]
    pub restricted_seconds: f64,
    #[serde(rename = "EligibleQueues")]
    pub eligible_queues: Vec<String>,
    #[serde(rename = "QueueIneligibilities")]
    pub queue_ineligibilities: Vec<String>,
    #[serde(rename = "CheatData")]
    pub cheat_data: Box<models::PartiesV1PartiesPartyIdGet200ResponseCheatData>,
    #[serde(rename = "XPBonuses")]
    pub xp_bonuses: Vec<serde_json::Value>,
    /// Empty string when there is no invite code
    #[serde(rename = "InviteCode")]
    pub invite_code: String,
}

impl PartiesV1PartiesPartyIdGet200Response {
    pub fn new(
        id: String,
        muc_name: String,
        voice_room_id: String,
        version: f64,
        client_version: String,
        members: Vec<models::PartiesV1PartiesPartyIdGet200ResponseMembersInner>,
        state: String,
        previous_state: String,
        state_transition_reason: String,
        accessibility: models::PartiesV1PartiesPartyIdGet200ResponseAccessibility,
        custom_game_data: models::PartiesV1PartiesPartyIdGet200ResponseCustomGameData,
        matchmaking_data: models::PartiesV1PartiesPartyIdGet200ResponseMatchmakingData,
        invites: Option<serde_json::Value>,
        requests: Vec<serde_json::Value>,
        queue_entry_time: String,
        error_notification: models::PartiesV1PartiesPartyIdGet200ResponseErrorNotification,
        restricted_seconds: f64,
        eligible_queues: Vec<String>,
        queue_ineligibilities: Vec<String>,
        cheat_data: models::PartiesV1PartiesPartyIdGet200ResponseCheatData,
        xp_bonuses: Vec<serde_json::Value>,
        invite_code: String,
    ) -> PartiesV1PartiesPartyIdGet200Response {
        PartiesV1PartiesPartyIdGet200Response {
            id,
            muc_name,
            voice_room_id,
            version,
            client_version,
            members,
            state,
            previous_state,
            state_transition_reason,
            accessibility: Box::new(accessibility),
            custom_game_data: Box::new(custom_game_data),
            matchmaking_data: Box::new(matchmaking_data),
            invites,
            requests,
            queue_entry_time,
            error_notification: Box::new(error_notification),
            restricted_seconds,
            eligible_queues,
            queue_ineligibilities,
            cheat_data: Box::new(cheat_data),
            xp_bonuses,
            invite_code,
        }
    }
}
