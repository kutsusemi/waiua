/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreGameV1MatchesCurrentGameMatchIdGet200ResponsePlayersInner {
    /// Player UUID
    #[serde(rename = "Subject")]
    pub subject: String,
    #[serde(rename = "TeamID")]
    pub team_id: Box<models::PregameV1MatchesPreGameMatchIdGet200ResponseTeamsInnerTeamId>,
    /// Character ID
    #[serde(rename = "CharacterID")]
    pub character_id: String,
    #[serde(rename = "PlayerIdentity")]
    pub player_identity:
        Box<models::PartiesV1PartiesPartyIdGet200ResponseMembersInnerPlayerIdentity>,
    #[serde(rename = "SeasonalBadgeInfo")]
    pub seasonal_badge_info: Box<
        models::PregameV1MatchesPreGameMatchIdGet200ResponseTeamsInnerPlayersInnerSeasonalBadgeInfo,
    >,
    #[serde(rename = "IsCoach")]
    pub is_coach: bool,
    #[serde(rename = "IsAssociated")]
    pub is_associated: bool,
}

impl CoreGameV1MatchesCurrentGameMatchIdGet200ResponsePlayersInner {
    pub fn new(
        subject: String,
        team_id: models::PregameV1MatchesPreGameMatchIdGet200ResponseTeamsInnerTeamId,
        character_id: String,
        player_identity: models::PartiesV1PartiesPartyIdGet200ResponseMembersInnerPlayerIdentity,
        seasonal_badge_info: models::PregameV1MatchesPreGameMatchIdGet200ResponseTeamsInnerPlayersInnerSeasonalBadgeInfo,
        is_coach: bool,
        is_associated: bool,
    ) -> CoreGameV1MatchesCurrentGameMatchIdGet200ResponsePlayersInner {
        CoreGameV1MatchesCurrentGameMatchIdGet200ResponsePlayersInner {
            subject,
            team_id: Box::new(team_id),
            character_id,
            player_identity: Box::new(player_identity),
            seasonal_badge_info: Box::new(seasonal_badge_info),
            is_coach,
            is_associated,
        }
    }
}
