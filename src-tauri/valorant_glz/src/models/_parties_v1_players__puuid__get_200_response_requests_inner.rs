/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PartiesV1PlayersPuuidGet200ResponseRequestsInner {
    #[serde(rename = "ID")]
    pub id: String,
    /// Party ID
    #[serde(rename = "PartyID")]
    pub party_id: String,
    /// Player UUID
    #[serde(rename = "RequestedBySubject")]
    pub requested_by_subject: String,
    #[serde(rename = "Subjects")]
    pub subjects: Vec<String>,
    /// Date in ISO 8601 format
    #[serde(rename = "CreatedAt")]
    pub created_at: String,
    /// Date in ISO 8601 format
    #[serde(rename = "RefreshedAt")]
    pub refreshed_at: String,
    #[serde(rename = "ExpiresIn")]
    pub expires_in: f64,
}

impl PartiesV1PlayersPuuidGet200ResponseRequestsInner {
    pub fn new(id: String, party_id: String, requested_by_subject: String, subjects: Vec<String>, created_at: String, refreshed_at: String, expires_in: f64) -> PartiesV1PlayersPuuidGet200ResponseRequestsInner {
        PartiesV1PlayersPuuidGet200ResponseRequestsInner {
            id,
            party_id,
            requested_by_subject,
            subjects,
            created_at,
            refreshed_at,
            expires_in,
        }
    }
}

