/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PartiesV1PlayersPuuidGet200Response {
    /// Player UUID
    #[serde(rename = "Subject")]
    pub subject: String,
    #[serde(rename = "Version")]
    pub version: f64,
    /// Party ID
    #[serde(rename = "CurrentPartyID")]
    pub current_party_id: String,
    #[serde(rename = "Invites", deserialize_with = "Option::deserialize")]
    pub invites: Option<serde_json::Value>,
    #[serde(rename = "Requests")]
    pub requests: Vec<models::PartiesV1PlayersPuuidGet200ResponseRequestsInner>,
    #[serde(rename = "PlatformInfo")]
    pub platform_info: Box<models::PartiesV1PlayersPuuidGet200ResponsePlatformInfo>,
}

impl PartiesV1PlayersPuuidGet200Response {
    pub fn new(
        subject: String,
        version: f64,
        current_party_id: String,
        invites: Option<serde_json::Value>,
        requests: Vec<models::PartiesV1PlayersPuuidGet200ResponseRequestsInner>,
        platform_info: models::PartiesV1PlayersPuuidGet200ResponsePlatformInfo,
    ) -> PartiesV1PlayersPuuidGet200Response {
        PartiesV1PlayersPuuidGet200Response {
            subject,
            version,
            current_party_id,
            invites,
            requests,
            platform_info: Box::new(platform_info),
        }
    }
}
