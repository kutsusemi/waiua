/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PregameV1MatchesPreGameMatchIdGet200Response {
    /// Pre-Game Match ID
    #[serde(rename = "ID")]
    pub id: String,
    #[serde(rename = "Version")]
    pub version: f64,
    #[serde(rename = "Teams")]
    pub teams: Vec<models::PregameV1MatchesPreGameMatchIdGet200ResponseTeamsInner>,
    #[serde(rename = "AllyTeam", deserialize_with = "Option::deserialize")]
    pub ally_team: Option<Box<models::PregameV1MatchesPreGameMatchIdGet200ResponseAllyTeam>>,
    #[serde(rename = "EnemyTeam", deserialize_with = "Option::deserialize")]
    pub enemy_team: Option<Box<models::PregameV1MatchesPreGameMatchIdGet200ResponseAllyTeam>>,
    #[serde(rename = "ObserverSubjects")]
    pub observer_subjects: Vec<serde_json::Value>,
    #[serde(rename = "MatchCoaches")]
    pub match_coaches: Vec<serde_json::Value>,
    #[serde(rename = "EnemyTeamSize")]
    pub enemy_team_size: f64,
    #[serde(rename = "EnemyTeamLockCount")]
    pub enemy_team_lock_count: f64,
    #[serde(rename = "PregameState")]
    pub pregame_state: PregameState,
    /// Date in ISO 8601 format
    #[serde(rename = "LastUpdated")]
    pub last_updated: String,
    /// Map ID
    #[serde(rename = "MapID")]
    pub map_id: String,
    #[serde(rename = "MapSelectPool")]
    pub map_select_pool: Vec<serde_json::Value>,
    #[serde(rename = "BannedMapIDs")]
    pub banned_map_ids: Vec<serde_json::Value>,
    #[serde(rename = "CastedVotes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub casted_votes: Option<Option<serde_json::Value>>,
    #[serde(rename = "MapSelectSteps")]
    pub map_select_steps: Vec<serde_json::Value>,
    #[serde(rename = "MapSelectStep")]
    pub map_select_step: f64,
    #[serde(rename = "Team1")]
    pub team1: Box<models::PregameV1MatchesPreGameMatchIdGet200ResponseTeamsInnerTeamId>,
    #[serde(rename = "GamePodID")]
    pub game_pod_id: String,
    /// Game Mode
    #[serde(rename = "Mode")]
    pub mode: String,
    #[serde(rename = "VoiceSessionID")]
    pub voice_session_id: String,
    #[serde(rename = "MUCName")]
    pub muc_name: String,
    /// JWT containing match ID and player IDs
    #[serde(rename = "TeamMatchToken")]
    pub team_match_token: String,
    #[serde(rename = "QueueID")]
    pub queue_id: Box<models::PregameV1MatchesPreGameMatchIdGet200ResponseQueueId>,
    #[serde(rename = "ProvisioningFlowID")]
    pub provisioning_flow_id: ProvisioningFlowId,
    #[serde(rename = "IsRanked")]
    pub is_ranked: bool,
    #[serde(rename = "PhaseTimeRemainingNS")]
    pub phase_time_remaining_ns: f64,
    #[serde(rename = "StepTimeRemainingNS")]
    pub step_time_remaining_ns: f64,
    #[serde(rename = "altModesFlagADA")]
    pub alt_modes_flag_ada: bool,
    #[serde(rename = "TournamentMetadata", deserialize_with = "Option::deserialize")]
    pub tournament_metadata: Option<serde_json::Value>,
    #[serde(rename = "RosterMetadata", deserialize_with = "Option::deserialize")]
    pub roster_metadata: Option<serde_json::Value>,
}

impl PregameV1MatchesPreGameMatchIdGet200Response {
    pub fn new(id: String, version: f64, teams: Vec<models::PregameV1MatchesPreGameMatchIdGet200ResponseTeamsInner>, ally_team: Option<models::PregameV1MatchesPreGameMatchIdGet200ResponseAllyTeam>, enemy_team: Option<models::PregameV1MatchesPreGameMatchIdGet200ResponseAllyTeam>, observer_subjects: Vec<serde_json::Value>, match_coaches: Vec<serde_json::Value>, enemy_team_size: f64, enemy_team_lock_count: f64, pregame_state: PregameState, last_updated: String, map_id: String, map_select_pool: Vec<serde_json::Value>, banned_map_ids: Vec<serde_json::Value>, map_select_steps: Vec<serde_json::Value>, map_select_step: f64, team1: models::PregameV1MatchesPreGameMatchIdGet200ResponseTeamsInnerTeamId, game_pod_id: String, mode: String, voice_session_id: String, muc_name: String, team_match_token: String, queue_id: models::PregameV1MatchesPreGameMatchIdGet200ResponseQueueId, provisioning_flow_id: ProvisioningFlowId, is_ranked: bool, phase_time_remaining_ns: f64, step_time_remaining_ns: f64, alt_modes_flag_ada: bool, tournament_metadata: Option<serde_json::Value>, roster_metadata: Option<serde_json::Value>) -> PregameV1MatchesPreGameMatchIdGet200Response {
        PregameV1MatchesPreGameMatchIdGet200Response {
            id,
            version,
            teams,
            ally_team: if let Some(x) = ally_team {Some(Box::new(x))} else {None},
            enemy_team: if let Some(x) = enemy_team {Some(Box::new(x))} else {None},
            observer_subjects,
            match_coaches,
            enemy_team_size,
            enemy_team_lock_count,
            pregame_state,
            last_updated,
            map_id,
            map_select_pool,
            banned_map_ids,
            casted_votes: None,
            map_select_steps,
            map_select_step,
            team1: Box::new(team1),
            game_pod_id,
            mode,
            voice_session_id,
            muc_name,
            team_match_token,
            queue_id: Box::new(queue_id),
            provisioning_flow_id,
            is_ranked,
            phase_time_remaining_ns,
            step_time_remaining_ns,
            alt_modes_flag_ada,
            tournament_metadata,
            roster_metadata,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PregameState {
    #[serde(rename = "character_select_active")]
    CharacterSelectActive,
    #[serde(rename = "provisioned")]
    Provisioned,
}

impl Default for PregameState {
    fn default() -> PregameState {
        Self::CharacterSelectActive
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProvisioningFlowId {
    #[serde(rename = "Matchmaking")]
    Matchmaking,
    #[serde(rename = "CustomGame")]
    CustomGame,
}

impl Default for ProvisioningFlowId {
    fn default() -> ProvisioningFlowId {
        Self::Matchmaking
    }
}

