/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreGameV1MatchesCurrentGameMatchIdGet200Response {
    /// Current Game Match ID
    #[serde(rename = "MatchID")]
    pub match_id: String,
    #[serde(rename = "Version")]
    pub version: f64,
    #[serde(rename = "State")]
    pub state: State,
    /// Map ID
    #[serde(rename = "MapID")]
    pub map_id: String,
    /// Game Mode
    #[serde(rename = "ModeID")]
    pub mode_id: String,
    #[serde(rename = "ProvisioningFlow")]
    pub provisioning_flow: ProvisioningFlow,
    #[serde(rename = "GamePodID")]
    pub game_pod_id: String,
    /// Chat room ID for \"all\" chat
    #[serde(rename = "AllMUCName")]
    pub all_muc_name: String,
    /// Chat room ID for \"team\" chat
    #[serde(rename = "TeamMUCName")]
    pub team_muc_name: String,
    #[serde(rename = "TeamVoiceID")]
    pub team_voice_id: String,
    /// JWT containing match ID, participant IDs, and match region
    #[serde(rename = "TeamMatchToken")]
    pub team_match_token: String,
    #[serde(rename = "IsReconnectable")]
    pub is_reconnectable: bool,
    #[serde(rename = "ConnectionDetails")]
    pub connection_details: Box<models::CoreGameV1MatchesCurrentGameMatchIdGet200ResponseConnectionDetails>,
    #[serde(rename = "PostGameDetails", deserialize_with = "Option::deserialize")]
    pub post_game_details: Option<serde_json::Value>,
    #[serde(rename = "Players")]
    pub players: Vec<models::CoreGameV1MatchesCurrentGameMatchIdGet200ResponsePlayersInner>,
    #[serde(rename = "MatchmakingData", deserialize_with = "Option::deserialize")]
    pub matchmaking_data: Option<serde_json::Value>,
}

impl CoreGameV1MatchesCurrentGameMatchIdGet200Response {
    pub fn new(match_id: String, version: f64, state: State, map_id: String, mode_id: String, provisioning_flow: ProvisioningFlow, game_pod_id: String, all_muc_name: String, team_muc_name: String, team_voice_id: String, team_match_token: String, is_reconnectable: bool, connection_details: models::CoreGameV1MatchesCurrentGameMatchIdGet200ResponseConnectionDetails, post_game_details: Option<serde_json::Value>, players: Vec<models::CoreGameV1MatchesCurrentGameMatchIdGet200ResponsePlayersInner>, matchmaking_data: Option<serde_json::Value>) -> CoreGameV1MatchesCurrentGameMatchIdGet200Response {
        CoreGameV1MatchesCurrentGameMatchIdGet200Response {
            match_id,
            version,
            state,
            map_id,
            mode_id,
            provisioning_flow,
            game_pod_id,
            all_muc_name,
            team_muc_name,
            team_voice_id,
            team_match_token,
            is_reconnectable,
            connection_details: Box::new(connection_details),
            post_game_details,
            players,
            matchmaking_data,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "IN_PROGRESS")]
    InProgress,
}

impl Default for State {
    fn default() -> State {
        Self::InProgress
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProvisioningFlow {
    #[serde(rename = "Matchmaking")]
    Matchmaking,
    #[serde(rename = "CustomGame")]
    CustomGame,
}

impl Default for ProvisioningFlow {
    fn default() -> ProvisioningFlow {
        Self::Matchmaking
    }
}

