/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PartiesV1PartiesPartyIdGet200ResponseMembersInner {
    /// Player UUID
    #[serde(rename = "Subject")]
    pub subject: String,
    #[serde(rename = "CompetitiveTier")]
    pub competitive_tier: f64,
    #[serde(rename = "PlayerIdentity")]
    pub player_identity: Box<models::PartiesV1PartiesPartyIdGet200ResponseMembersInnerPlayerIdentity>,
    #[serde(rename = "SeasonalBadgeInfo", deserialize_with = "Option::deserialize")]
    pub seasonal_badge_info: Option<serde_json::Value>,
    #[serde(rename = "IsOwner", skip_serializing_if = "Option::is_none")]
    pub is_owner: Option<bool>,
    #[serde(rename = "QueueEligibleRemainingAccountLevels")]
    pub queue_eligible_remaining_account_levels: f64,
    #[serde(rename = "Pings")]
    pub pings: Vec<models::PartiesV1PartiesPartyIdGet200ResponseMembersInnerPingsInner>,
    #[serde(rename = "IsReady")]
    pub is_ready: bool,
    #[serde(rename = "IsModerator")]
    pub is_moderator: bool,
    #[serde(rename = "UseBroadcastHUD")]
    pub use_broadcast_hud: bool,
    #[serde(rename = "PlatformType")]
    pub platform_type: PlatformType,
}

impl PartiesV1PartiesPartyIdGet200ResponseMembersInner {
    pub fn new(subject: String, competitive_tier: f64, player_identity: models::PartiesV1PartiesPartyIdGet200ResponseMembersInnerPlayerIdentity, seasonal_badge_info: Option<serde_json::Value>, queue_eligible_remaining_account_levels: f64, pings: Vec<models::PartiesV1PartiesPartyIdGet200ResponseMembersInnerPingsInner>, is_ready: bool, is_moderator: bool, use_broadcast_hud: bool, platform_type: PlatformType) -> PartiesV1PartiesPartyIdGet200ResponseMembersInner {
        PartiesV1PartiesPartyIdGet200ResponseMembersInner {
            subject,
            competitive_tier,
            player_identity: Box::new(player_identity),
            seasonal_badge_info,
            is_owner: None,
            queue_eligible_remaining_account_levels,
            pings,
            is_ready,
            is_moderator,
            use_broadcast_hud,
            platform_type,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PlatformType {
    #[serde(rename = "PC")]
    Pc,
}

impl Default for PlatformType {
    fn default() -> PlatformType {
        Self::Pc
    }
}

