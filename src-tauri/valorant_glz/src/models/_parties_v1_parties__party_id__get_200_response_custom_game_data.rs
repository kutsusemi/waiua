/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PartiesV1PartiesPartyIdGet200ResponseCustomGameData {
    #[serde(rename = "Settings")]
    pub settings: Box<models::PartiesV1PartiesPartyIdGet200ResponseCustomGameDataSettings>,
    #[serde(rename = "Membership")]
    pub membership: Box<models::PartiesV1PartiesPartyIdGet200ResponseCustomGameDataMembership>,
    #[serde(rename = "MaxPartySize")]
    pub max_party_size: f64,
    #[serde(rename = "AutobalanceEnabled")]
    pub autobalance_enabled: bool,
    #[serde(rename = "AutobalanceMinPlayers")]
    pub autobalance_min_players: f64,
    #[serde(rename = "HasRecoveryData")]
    pub has_recovery_data: bool,
}

impl PartiesV1PartiesPartyIdGet200ResponseCustomGameData {
    pub fn new(
        settings: models::PartiesV1PartiesPartyIdGet200ResponseCustomGameDataSettings,
        membership: models::PartiesV1PartiesPartyIdGet200ResponseCustomGameDataMembership,
        max_party_size: f64,
        autobalance_enabled: bool,
        autobalance_min_players: f64,
        has_recovery_data: bool,
    ) -> PartiesV1PartiesPartyIdGet200ResponseCustomGameData {
        PartiesV1PartiesPartyIdGet200ResponseCustomGameData {
            settings: Box::new(settings),
            membership: Box::new(membership),
            max_party_size,
            autobalance_enabled,
            autobalance_min_players,
            has_recovery_data,
        }
    }
}
