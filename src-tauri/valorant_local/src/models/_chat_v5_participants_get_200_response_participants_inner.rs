/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChatV5ParticipantsGet200ResponseParticipantsInner {
    #[serde(rename = "activePlatform", deserialize_with = "Option::deserialize")]
    pub active_platform: Option<serde_json::Value>,
    #[serde(rename = "cid")]
    pub cid: String,
    #[serde(rename = "game_name")]
    pub game_name: String,
    #[serde(rename = "game_tag")]
    pub game_tag: String,
    #[serde(rename = "muted")]
    pub muted: bool,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "pid")]
    pub pid: String,
    /// Player UUID
    #[serde(rename = "puuid")]
    pub puuid: String,
    #[serde(rename = "region")]
    pub region: String,
}

impl ChatV5ParticipantsGet200ResponseParticipantsInner {
    pub fn new(
        active_platform: Option<serde_json::Value>,
        cid: String,
        game_name: String,
        game_tag: String,
        muted: bool,
        name: String,
        pid: String,
        puuid: String,
        region: String,
    ) -> ChatV5ParticipantsGet200ResponseParticipantsInner {
        ChatV5ParticipantsGet200ResponseParticipantsInner {
            active_platform,
            cid,
            game_name,
            game_tag,
            muted,
            name,
            pid,
            puuid,
            region,
        }
    }
}
