/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChatV4FriendrequestsGet200ResponseRequestsInner {
    #[serde(rename = "game_name")]
    pub game_name: String,
    #[serde(rename = "game_tag")]
    pub game_tag: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "note")]
    pub note: String,
    #[serde(rename = "pid")]
    pub pid: String,
    /// Player UUID
    #[serde(rename = "puuid")]
    pub puuid: String,
    #[serde(rename = "region")]
    pub region: String,
    #[serde(rename = "subscription")]
    pub subscription: Subscription,
}

impl ChatV4FriendrequestsGet200ResponseRequestsInner {
    pub fn new(
        game_name: String,
        game_tag: String,
        name: String,
        note: String,
        pid: String,
        puuid: String,
        region: String,
        subscription: Subscription,
    ) -> ChatV4FriendrequestsGet200ResponseRequestsInner {
        ChatV4FriendrequestsGet200ResponseRequestsInner {
            game_name,
            game_tag,
            name,
            note,
            pid,
            puuid,
            region,
            subscription,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Subscription {
    #[serde(rename = "pending_out")]
    Out,
    #[serde(rename = "pending_in")]
    In,
}

impl Default for Subscription {
    fn default() -> Subscription {
        Self::Out
    }
}
