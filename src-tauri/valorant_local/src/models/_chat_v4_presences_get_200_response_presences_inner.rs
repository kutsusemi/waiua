/*
 * Valorant API
 *
 * Valorant API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChatV4PresencesGet200ResponsePresencesInner {
    #[serde(
        rename = "actor",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub actor: Option<Option<serde_json::Value>>,
    #[serde(rename = "basic")]
    pub basic: String,
    #[serde(
        rename = "details",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub details: Option<Option<serde_json::Value>>,
    #[serde(rename = "game_name")]
    pub game_name: String,
    #[serde(rename = "game_tag")]
    pub game_tag: String,
    #[serde(
        rename = "location",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub location: Option<Option<serde_json::Value>>,
    #[serde(
        rename = "msg",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub msg: Option<Option<serde_json::Value>>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(
        rename = "patchline",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub patchline: Option<Option<serde_json::Value>>,
    #[serde(rename = "pid")]
    pub pid: String,
    #[serde(
        rename = "platform",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub platform: Option<Option<serde_json::Value>>,
    #[serde(rename = "private", deserialize_with = "Option::deserialize")]
    pub private: Option<String>,
    #[serde(
        rename = "privateJwt",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub private_jwt: Option<Option<serde_json::Value>>,
    #[serde(rename = "product")]
    pub product: Product,
    /// Player UUID
    #[serde(rename = "puuid")]
    pub puuid: String,
    #[serde(rename = "region")]
    pub region: String,
    #[serde(rename = "resource")]
    pub resource: String,
    #[serde(rename = "state")]
    pub state: State,
    #[serde(rename = "summary")]
    pub summary: String,
    /// Milliseconds since epoch
    #[serde(rename = "time")]
    pub time: f64,
}

impl ChatV4PresencesGet200ResponsePresencesInner {
    pub fn new(
        basic: String,
        game_name: String,
        game_tag: String,
        name: String,
        pid: String,
        private: Option<String>,
        product: Product,
        puuid: String,
        region: String,
        resource: String,
        state: State,
        summary: String,
        time: f64,
    ) -> ChatV4PresencesGet200ResponsePresencesInner {
        ChatV4PresencesGet200ResponsePresencesInner {
            actor: None,
            basic,
            details: None,
            game_name,
            game_tag,
            location: None,
            msg: None,
            name,
            patchline: None,
            pid,
            platform: None,
            private,
            private_jwt: None,
            product,
            puuid,
            region,
            resource,
            state,
            summary,
            time,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Product {
    #[serde(rename = "valorant")]
    Valorant,
    #[serde(rename = "league_of_legends")]
    LeagueOfLegends,
}

impl Default for Product {
    fn default() -> Product {
        Self::Valorant
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "mobile")]
    Mobile,
    #[serde(rename = "dnd")]
    Dnd,
    #[serde(rename = "away")]
    Away,
    #[serde(rename = "chat")]
    Chat,
}

impl Default for State {
    fn default() -> State {
        Self::Mobile
    }
}
